/*
Problem Statement
Given is a number sequence A of length N. Let us divide this sequence into one or more non-empty contiguous intervals. Then, for each of these intervals, let us compute the bitwise OR of the numbers in it.
Find the minimum possible value of the bitwise XOR of the values obtained in this way.
Input
The first line of the input consists of an integer N. The second line of the input consists of N space-separated integers.
N
A1 A2. . AN

Constraints
1 ≤ N ≤ 20
0 ≤ Ai < 2^30
All values in the input are integers.
Output
Print the answer.
Example
Sample Input 1
3
1 5 7
Sample Output 1
2

Sample Input 2
3
10 10 10
Sample Output 2
0

Sample Input 3
4
1 3 3 1
Sample Output 3
0
*/

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner scan = new Scanner(System.in);
 
        int n = scan.nextInt();
        int[] a = new int[n];
        for(int i=0; i<n; i++){
            a[i] = scan.nextInt();
        }
        int a0 = 0;
        int b1 = 0;
        int ans = Integer.MAX_VALUE;
        
        for(int i=0; i<(int)Math.pow(2,n); i++){
            a0 = 0;
            b1 = 0;
            for(int j=0; j<n; j++){
                if((i>>j & 1) ==1 || j==(n-1)){
                   a0 = a0|a[j];
                   b1 = b1^a0;
                   a0 = 0; 
                }else{
                   a0 = a0|a[j];
                }
            }
            //int ch = a0^b1;
            //System.out.println(a0+" "+b1+" "+i+" "+ch);
            ans = (int)Math.min(ans, b1);
        }
        System.out.println(ans);
    }
}
